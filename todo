- [ ?] **Klasa Subject**
  - Pola: nazwa, trudność, predyspozycje, wymagany czas nauki, czas przeznaczony na naukę, ects.
  - Metody: study(), isReady(), getProgress(), getName(), getDifficulty(), getPredispositions()

- [ ] **Klasa StudyEvent**
  - Pola: przedmiot, liczba godzin, dzień.
  - Metoda: getDescription().

- [ ] **Klasa ExamResult**
  - Pola: przedmiot, wynik punktowy, czy zaliczony.
  - Metody: isPassed(), getGrade(), getSubjectName().

---

## Etap 3: Planowanie nauki

- [ ] **Klasa Plan**
  - Pola: liczba dni, mapa planu (dzień → przedmiot → liczba godzin).
  - Metody: generate(), getDailyPlan().

- [ ] **Klasa SubjectSorter**
  - Metoda: sortSubjects() – wybierz algorytm sortowania np. po trudności lub predyspozycjach.

---

## Etap 4: Motywatory i rozpraszacze

- [ ] **Interfejs Motivator**
  - Metody: apply(Student), getName().

- [ ] **Klasy implementujące Motivator**
  - Przykłady: CoffeeBreak, Procrastination.
  - Każda ma własną logikę wpływu na motywację/efektywność studenta.

---

## Etap 5: Klasa Student

- [ ] **Klasa Student**
  - Pola: imię, motywacja, plan nauki, lista przedmiotów, historia wydarzeń.
  - Metody: study(day), takeExams(), applyMotivator(), getMotivation(), setMotivation(), getPlan(), getSubjects(), getHistory().

---

## Etap 6: Symulacja i logika główna

- [ ] **Klasa ExamSimulator**
  - Pola: student, lista motywatorów, liczba dni.
  - Metoda: run() – przeprowadza całą symulację sesji dzień po dniu, losuje motywatory, aktualizuje postępy.

- [ ] **Wywołanie symulacji w Main.java**
  - Inicjalizacja studentów, przedmiotów, planu.
  - Uruchomienie symulacji i wyświetlenie wyników.

---

## Etap 7: Interfejs użytkownika (konsolowy)

- [ ] **Wczytywanie danych od użytkownika**
  - Liczba dni na naukę, liczba i nazwy przedmiotów, stopień trudności, itp.

- [ ] **Wyświetlanie postępów i wyników**
  - Wypisuj na konsoli postępy nauki, plany na dany dzień, wyniki egzaminów, informację o zdanej/niezdanej sesji.

---

## Etap 8: Wizualizacja (opcjonalnie)

- [ ] **Tekstowa wizualizacja postępu**
  - Prosty wykres słupkowy w konsoli (np. za pomocą znaków `#`).

- [ ] **Wizualizacja wykresów (zaawansowane)**
  - Dodaj bibliotekę (np. JFreeChart), by generować wykresy postępu/wyników (opcjonalnie).

---

## Etap 9: Testy jednostkowe i dokumentacja

- [ ] **Dodaj testy jednostkowe (JUnit)**
  - Przetestuj kluczowe metody klas: Subject, Plan, Student, Motivator.

- [ ] **Uzupełnij dokumentację w README**
  - Opisz jak działa aplikacja, jak ją uruchomić i rozbudowywać.

---

## Etap 10: Rozbudowa i eksperymenty (opcjonalnie)

- [ ] **Dodaj nowe motywatory/rozpraszacze**
  - Np. „Znajomi”, „Nocna nauka”, „Zły dzień”.

- [ ] **Utrudnienia losowe**
  - Np. nagły spadek motywacji, dodatkowe egzaminy, itp.

- [ ] **Możliwość zapisu/wczytania stanu**
  - (np. do pliku tekstowego).

---
