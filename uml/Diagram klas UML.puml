@startuml

' ===== INTERFEJSY I MOTYWATORY =====
interface Motivator {
    +apply(student: Student): void
    +getName(): String
}

class CoffeeBreak implements Motivator {
    +apply(student: Student): void
    +getName(): String
}

class Procrastination implements Motivator {
    +apply(student: Student): void
    +getName(): String
}

Motivator <|-- CoffeeBreak
Motivator <|-- Procrastination

' ===== PRZEDMIOT =====
class Subject {
    -name: String
    -predispositions: int
    -requiredTime: int
    -studiedTime: double
    -ects: int
    +study(hours: double): void
    +isReady(): boolean
    +getProgress(): double
    +getName(): String
    +getRequiredTime(): int
    +getStudiedTime(): double
    +getEcts(): int
    +getPredispositions(): int
}

' ===== SORTOWANIE PRZEDMIOTÃ“W =====
class SubjectSorter {
    +sortSubjects(subjects: List<Subject>): List<Subject>
}

' ===== ZDARZENIE NAUKI =====
class StudyEvent {
    -subject: Subject
    -hours: int
    -day: int
    -motivation: int
    +getDescription(): String
}

' ===== PLAN =====
class Plan {
    -days: int
    -schedule: Map<Integer, Map<Subject, Integer>>
    +generate(subjects: List<Subject>, totalDays: int, mode: int): void
    +getDailyPlan(day: int): Map<Subject, Integer>
    +printPlan(): void
    +getSchedule(): Map<Integer, Map<Subject, Integer>>
}

' ===== WYNIK EGZAMINU =====
class ExamResult {
    -subject: Subject
    -score: double
    -passed: boolean
    +isPassed(): boolean
    +getGrade(): String
    +getSubjectName(): String
    +getScore(): double
    +toString(): String
}

' ===== STUDENT =====
class Student {
    -name: String
    -motivation: int
    -plan: Plan
    -subjects: List<Subject>
    -history: List<StudyEvent>
    -wyniki: List<ExamResult>
    -visualizer: Visualizer
    +study(subject: Subject, hours: int, day: int): void
    +takeExams(subjects: List<Subject>): List<ExamResult>
    +applyMotivator(m: Motivator): void
    +getMotivation(): int
    +setMotivation(motivation: int): void
    +getPlan(): Plan
    +getSubjects(): List<Subject>
    +getHistory(): List<StudyEvent>
    +setVisualizer(Visualizer): void
    +getVisualizer(): Visualizer
    +getExamResults(): List<ExamResult>
}

' ===== WIZUALIZATOR =====
class Visualizer {
    +Visualizer()
    +visualizePlan(plan: Plan): void
    +visualizeProgress(student: Student): void
    +visualizeResults(student: Student): void
}

' ===== RELACJE =====
Student --> Plan
Student --> Subject
Student --> StudyEvent
Student --> ExamResult
Student --> Visualizer
Plan --> Subject
Plan --> SubjectSorter
StudyEvent --> Subject
ExamResult --> Subject
Visualizer ..> Plan
Visualizer ..> Student

@enduml