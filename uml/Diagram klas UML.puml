@startuml
interface Motivator {
    +apply(student: Student): void
    +getName(): String
}

class CoffeeBreak implements Motivator {
    +apply(student: Student): void
    +getName(): String
}

class Procrastination implements Motivator {
    +apply(student: Student): void
    +getName(): String
}

Motivator <|-- CoffeeBreak
Motivator <|-- Procrastination

class Subject {
    -name: String
    -predispositions: int
    -requiredTime: int
    -studiedTime: int
    -ects: int
    +study(hours: int): void
    +isReady(): boolean
    +getProgress(): double
    +getName(): String
    +getDifficulty(): int
    +getPredispositions(): int
}

class SubjectSorter {
    +sortSubjects(subjects: List<Subject>): List<Subject>
}

class StudyEvent {
    -subject: Subject
    -hours: int
    -day: int
    +getDescription(): String
}

class Plan {
    -days: int
    -schedule: Map<Integer, Map<Subject, Integer>>
    +generate(subjects: List<Subject>, totalDays: int): void
    +getDailyPlan(day: int): Map<Subject, Integer>
}

class ExamResult {
    -subject: Subject
    -score: int
    -passed: boolean
    +isPassed(): boolean
    +getGrade(): String
    +getSubjectName(): String
}

class Student {
    -name: String
    -motivation: int
    -plan: Plan
    -subjects: List<Subject>
    -history: List<StudyEvent>
    +study(day: int): void
    +takeExams(): List<ExamResult>
    +applyMotivator(m: Motivator): void
    +getMotivation(): int
    +setMotivation(motivation: int): void
    +getPlan(): Plan
    +getSubjects(): List<Subject>
    +getHistory(): List<StudyEvent>
}

class ExamSimulator {
    -student: Student
    -motivators: List<Motivator>
    -days: int
    +run(): void
}

ExamSimulator --> Student
ExamSimulator --> Motivator
Student --> Plan
Student --> Subject
Student --> StudyEvent
ExamResult --> Subject
StudyEvent --> Subject
Plan --> Subject
Plan --> SubjectSorter

@enduml